- Bugs
	- Anything except solid brushes intersecting with an object causes FPS to GRADUALLY decrease. Removing the not solid brush from the object will make FPS GRADUALLY increase (in gm_construct).
	- Bouyancy calculations taking too long(?) Large amounts of lag caused if many objects are intersecting with water at once.
	- Dynamite model acts odd (inconsistency between server and client predictions?) Physical model is detached from graphical model.
	- IsAsleep() returning true causes lag freeze (Only when object asleep on displacements?)
	- Mystical magnetic properities depending on if using singlethreaded or multithreaded.
		- Singlethreaded: attractive (literally, use your physgun)
		- Multithreaded: repulsive (object will bounce if on top of another)
	- Immense lag when an object is welded to world and crash when removing that weld in materialsystem
	- Parallel Constraint Solver crash: Manifold has a body that isn't in the bodies array!
	- SHADOW CONTROLLERS
		- 120 degree odd spot, depending on what rotation you grab the object (tested on yaw axis)
			- Inside: 120 degrees of correctness, 240 of error
			- Outside: 240 degrees of correctness, 120 of error
			- Maybe we can only tolerate from 120 to -120 (object rotation)?
			- Maybe we aren't calculating for a different range between bullet quaternions and HL Quats?
		- No matter what the rotation is, the bull tranform rotation and target rotation are the SAME! (except for pos/neg)
		- The object's tranform rotation should be the same as the target rotation after one try, but it's the opposite even though the target rotation did not change!
	- MAPS
		- SOLID_BSP brushes take too long for calculations! Collisions between them and the world are being calculated!
			- Should we assign the world geometry a collision group, and have our shadow controller not calculate collisions against that group?
	- CCollisionEvent::ShouldCollide appears to return false after the object has slept atleast once(?)
- TODO
	- Support concave meshes (see: trash dumpster)
	- In the future, expose unexposed functions to the lua states under table physenv (or get garry to support them). Expose features such as:
		- Soft bodies
		- Scaling of models
		- ...
	- IPhysicsCollisionEvent::Friction controls sound and effects! Implement this!
	- CONSTRAINTS
		- Implement constraint_breakableparams_t
		- Ragdolls, etc.