- Bugs
	- Anything except solid brushes intersecting with an object causes FPS to GRADUALLY decrease. Removing the not solid brush from the object will make FPS GRADUALLY increase (in gm_construct).
	- Bouyancy calculations taking too long(?) Large amounts of lag caused if many objects are intersecting with water at once.
	- Dynamite tool makes an odd object. Physical model separated from graphics model.
	- IsAsleep() returning true causes lag freeze (Only when object asleep on displacements?)
	- Mystical magnetic properities depending on if using singlethreaded or multithreaded.
		- Singlethreaded: attractive (literally, use your physgun)
		- Multithreaded: repulsive (object will bounce if on top of another)
	- Immense lag when an object is welded to world
		- World is unfrozen(?) Loads of collision points calculated on the static mesh the weld was made on
	- Parallel Constraint Solver crash: Manifold has a body that isn't in the bodies array!
		- Appears to be with the world only
		- Flatgrass: Happens whenever something collides (with the world only?): Object m_companionId == -2
	- SHADOW CONTROLLERS
		- >70 to <-70 angles on all 3 axis seem to be the spots our calculations fuck up on
			- At 71 for example, the calculations slowly become more inaccurate.
	- MAPS
		- SOLID_BSP brushes take too long for calculations(construct white room)! Collisions between them and the world are being calculated!
			- Should we assign the world geometry a collision group, and have our shadow controller not calculate collisions against that group?
	- CCollisionEvent::ShouldCollide appears to return false after the object has slept atleast once(?)
	- All concave meshes aren't working.
		- is_virtual set to true on the concave meshes that aren't working.
	- Weld to world apparently makes the whole map get simulated (aka LOADS OF COLLISIONS!) Appears to ignore needsBroadphaseCollision callback.
	- Assert hit if you wake a constrained object without waking it's partner.
	- MULTITHREADED: Model kennel_physics.mdl(llamar's cage) triggers an assert (more points than MAX_NUM_SPU_CONVEX_POINTS)
	- Physgun: Won't detect asleep objects for some reason, until you physgun it in a certain spot.
		- Works fine if you always return false in CPhysicsObject::IsAsleep
	- PlayerControllers
		- Doesn't seem that bullet is properly simulating these - props they're obviously touching aren't waken up
		and there's no collision points being drawn in the debug overlay.
	- Constraints
		- If a constrained object goes too far away from the world, the game crashes.
- TODO
	- In the future, expose unexposed functions to the lua states under table physenv (or get garry to support them). Expose features such as:
		- Soft bodies
		- Scaling of models
		- ...
	- IPhysicsCollisionEvent::Friction controls sound and effects! Implement this!
	- CONSTRAINTS
		- Implement constraint_breakableparams_t
		- Ragdolls, etc.
	- Bullet has an internal profiler, grab the results from it and give them to vprof.
	- When we're just about wrapping up, implement saving!