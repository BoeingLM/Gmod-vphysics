- Bugs
	- Anything except solid brushes intersecting with an object causes FPS to GRADUALLY decrease. Removing the not solid brush from the object will make FPS GRADUALLY increase (in gm_construct).
	- Bouyancy calculations taking too long(?) Large amounts of lag caused if many objects are intersecting with water at once.
	- Dynamite tool's preview model has a physics model that falls from the origin of the world.
		- Is this intended behavior?
	- Immense lag when an object is welded to world
		- World is unfrozen(?) Loads of collision points calculated on the static mesh the weld was made on
	- MAPS
		- SOLID_BSP brushes take too long for calculations(construct white room)! Collisions between them and the world are being calculated!
	- Weld to world apparently makes the whole map get simulated (aka LOADS OF COLLISIONS!) Appears to ignore needsBroadphaseCollision callback.
	- Assert hit if you wake a constrained object without waking it's partner.
	- MULTITHREADED: Model kennel_physics.mdl(llamar's cage) triggers an assert (more points than MAX_NUM_SPU_CONVEX_POINTS)
	- Physgun: Won't detect asleep objects for some reason, until you physgun it in a certain spot.
		- Works fine if you always return false in CPhysicsObject::IsAsleep
	- Constraints
		- If a constrained object goes too far away from the world, the game crashes.
		- Deleting a constrained object (ex. a balloon) makes the game call a function from the deleted object.
			- Calls DestroyObject (which adds object to delete queue), and then CleanupDeleteList, and afterwards the game crashes.
	- Memory leaks everywhere! Bullet memory management rules = whoever allocates memory must delete it!
- TODO
	- In the future, expose unexposed functions to the lua states under table physenv (or get garry to support them). Expose features such as:
		- Soft bodies
			- Would require alot of work on garry's part, such as networking, prediction, etc...
		- Scaling of collision models
			- Vector(1, 1, 1) would be normal scale.
		- ...
	- IPhysicsCollisionEvent::Friction controls sound and effects! Implement this properly!
	- CONSTRAINTS
		- Implement constraint_breakableparams_t
		- Ragdolls, etc.
	- Bullet has an internal profiler, grab the results from it and give them to vprof.
	- When we're just about wrapping up, implement saving!
	- The code needs to be cleaned up and become nice and tidy!
	- Expose new collision shapes in CPhysicsCollision!
	- Valve may have hardcoded vehicle handling in ivp, but we don't have to! Expose ways for the game to control bullet vehicles.
	- Bullet makefiles